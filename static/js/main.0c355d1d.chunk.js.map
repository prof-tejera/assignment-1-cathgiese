{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/Loading.js","views/DocumentationView.js","components/generic/Button/Button.js","components/generic/DisplayTime/DisplayTime.js","components/generic/Panel.js","components/generic/Selector/Selector.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","Title","_templateObject3","RenderComponent","_templateObject4","Documentation","table","_templateObject5","DocumentComponent","_ref","title","component","propDocs","React","createElement","map","doc","index","key","prop","description","type","defaultValue","primaryColor","sizeMapping","small","medium","large","Dot","span","props","size","color","DotGroup","Loading","Button","active","text","btnProps","Object","assign","className","Screen","minutes","seconds","style","width","height","textAlign","marginBottom","background","fontSize","padding","Panel","children","Selector","label","numbers","selectProps","name","Stopwatch","isRunning","setIsRunning","useState","time","setTime","min","setMinutes","sec","setSeconds","useEffect","intervalId","setInterval","clearInterval","Math","floor","console","log","Array","keys","number","value","background-color","onChange","e","target","DisplayTime","onClick","startStop","reset","Countdown","timeNumbers","fastForward","XY","rounds","setRounds","roundsCount","setRoundsCount","roundNumbers","Tabata","workCount","setWorkCount","restCount","setRestCount","workStatus","setWorkStatus","Timers","Timer","TimerTitle","TimersView","timers","C","timer","concat","Nav","Link","to","App","Router","Routes","Route","path","element","DocumentationView","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0c355d1d.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({ title, component, propDocs }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Container>\n        <RenderComponent>{component}</RenderComponent>\n        <Documentation>\n          <thead>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {propDocs.map((doc, index) => {\n              return (\n                <tr key={index}>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = ({ size = \"medium\", color = primaryColor }) => {\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nexport default Loading;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\n/**\n * You can document your components by using the DocumentComponent component\n */\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from 'react'\nimport \"./Button.css\";\n\nconst Button = ({ active, text, ...btnProps }) => {\n  return (\n    <button\n      className={active ? \"Default-button Default-button-active\" : \"Default-button\"}\n      {...btnProps}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Screen = ({ minutes, seconds }) => {\n    return (\n      <div\n        style={{\n          // border: \"1px solid black\",\n          width: 300,\n          height: 70,\n          textAlign: \"center\",\n          marginBottom: 10,\n          background: \"white\",\n          fontSize: \"50px\",\n          padding: \"30px\"\n        }}\n      >\n        {minutes}m\n        {seconds}s\n      </div>\n    );\n  };\n  \n  export default Screen;\n  ","import React from \"react\";\n\nconst Panel = (props) => {\n  return <div>{props.children}</div>;\n};\n\nexport default Panel;\n","import React from 'react'\nimport \"./Selector.css\";\n\nconst Selector = ({ label, numbers, ...selectProps }) => {\n\n  return (\n    <label>\n      <select\n        className=\"default\"\n        name=\"selectedTime\"\n        {...selectProps}>\n        {numbers}\n      </select>\n      {label}\n    </label>\n  );\n};\n\nexport default Selector;","import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport Selector from \"../generic/Selector/Selector\";\n\nconst Stopwatch = () => {\n    // Store the time and button\n    const [isRunning, setIsRunning] = useState(null);\n    const [time, setTime] = useState(0);\n    const [min, setMinutes] = useState(null);\n    const [sec, setSeconds] = useState(null);\n\n    // Credit for setInterval & math.floor:\n    // https://medium.com/how-to-react/simple-way-to-create-a-stopwatch-in-react-js-bcc0e08e041e\n    useEffect(() => {\n        let intervalId;\n        if (isRunning && time !== min + sec) {\n          // setting time from 0 to 1 every 10 milisecond using javascript setInterval method\n          intervalId = setInterval(() => setTime(time + 1), 10);\n        }\n        return () => clearInterval(intervalId);\n        \n      }, [isRunning, time, min, sec]);\n\n    // Minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000);\n\n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    // Start and stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } else {\n            setIsRunning(true)\n        }\n    }\n    console.log(isRunning, time)\n\n    const reset = () => {\n        setIsRunning(null);\n        setTime(0)\n    }\n\n    // Show 59 numbers for minutes and seconds\n    const numbersList = [...Array(60).keys()]\n    const numbers = numbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n    \n    return (\n        <div className=\"grid-container\">\n        <Panel background-color=\"blue\">\n            <Selector \n                label=\"min\"\n                onChange={e => setMinutes(e.target.value*6000)}\n                numbers={numbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setSeconds(e.target.value*100)}\n                numbers={numbers}/>\n            <DisplayTime\n                minutes={minutes}\n                seconds={seconds}/>\n        \n            <Button \n                text={isRunning ? \"Pause\" : \"Start\"}\n                onClick={startStop}/>\n            <Button \n                text=\"Reset\"\n                onClick={reset}/>\n        </Panel>\n        </div>\n    )\n};\n\nexport default Stopwatch;\n","import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport Selector from \"../generic/Selector/Selector\";\n\nconst Countdown = () => {\n    // Store the time and button\n    const [isRunning, setIsRunning] = useState(null);\n    const [time, setTime] = useState(0);\n    const [min, setMinutes] = useState(null);\n    const [sec, setSeconds] = useState(null);\n\n    useEffect(() => {\n        let intervalId;\n        if (isRunning && time > 0) {\n            // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n            intervalId = setInterval(() => setTime(time - 1), 10);\n            }\n        return () => clearInterval(intervalId);\n\n      }, [isRunning, time, min, sec]);\n\n    // Minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000);\n \n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    // Start and stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } else {\n            setIsRunning(true)\n            setTime(min + sec + 99)\n        }\n    }\n\n    // Reset timer\n    const reset = () => {\n        setIsRunning(null);\n        setTime(min + sec);\n    }\n\n    // Fast forward (clear) timer\n    const fastForward = () => {\n        setTime(0)\n    }\n\n    console.log(time)\n\n    // Show 59 numbers for minutes and seconds\n    const timeNumbersList = [...Array(60).keys()]\n    const timeNumbers = timeNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    return (\n        <div className=\"grid-container\">\n        <Panel background-color=\"blue\">\n            <Selector \n                label=\"min\"\n                onChange={e => setMinutes(e.target.value*6000)}\n                numbers={timeNumbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setSeconds(e.target.value*100)}\n                numbers={timeNumbers}/>\n            <DisplayTime\n                minutes={minutes}\n                seconds={seconds}/>\n        \n            <Button \n                text={isRunning && time !== 0 ? \"Pause\" : \"Start\"}\n                onClick={startStop}/>\n            <Button \n                text=\"Reset\"\n                onClick={reset}/>\n            <Button \n                text=\">>\"\n                onClick={fastForward}/>\n            </Panel>\n        </div>\n    )\n};\n\nexport default Countdown;\n","import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport Selector from \"../generic/Selector/Selector\";\n\nconst XY = () => {\n    // Store the time and button\n    const [isRunning, setIsRunning] = useState(null);\n    const [time, setTime] = useState(0);\n    const [min, setMinutes] = useState(null);\n    const [sec, setSeconds] = useState(null);\n    const [rounds, setRounds] = useState(0);\n    const [roundsCount, setRoundsCount] = useState(0)\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning && time > 0) {\n            // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n            intervalId = setInterval(() => setTime(time - 1), 10);\n            }\n        else if (isRunning && time === 0 && rounds > 1) {\n            setTime(min+sec+99)\n            setRounds(rounds-1)\n            intervalId = setInterval(() => setTime(time - 1), 10);\n        }\n        return () => clearInterval(intervalId);\n\n      }, [isRunning, time, min, sec, rounds]);\n\n    // Minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000);\n \n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    // Start and stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } else {\n            setIsRunning(true)\n        }\n    }\n\n    // Store rounds\n    const handleRounds = e => {\n        setRoundsCount(e.target.value)\n        setRounds(e.target.value)\n    }\n\n    // Reset timer\n    const reset = () => {\n        setIsRunning(null);\n        setTime(min + sec);\n        setRounds(roundsCount)\n    }\n\n    // Fast forward (clear) timer\n    const fastForward = () => {\n        setTime(0)\n        setRounds(0)\n    }\n\n    // Show 59 numbers for minutes and seconds\n    const timeNumbersList = [...Array(60).keys()]\n    const timeNumbers = timeNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    // Show max 30 rounds\n    const roundNumbersList = [...Array(31).keys()]\n    const roundNumbers = roundNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    return (\n        <div className=\"grid-container\">\n        <Panel background-color=\"blue\">\n            <Selector \n                label=\"min\"\n                onChange={e => setMinutes(e.target.value*6000)}\n                numbers={timeNumbers}/>\n            <Selector \n                label=\"sec\"\n                onChange={e => setSeconds(e.target.value*100)}\n                numbers={timeNumbers}/>\n            <Selector \n                label=\"rounds\"\n                onChange={handleRounds}\n                numbers={roundNumbers}/>\n            <DisplayTime\n                minutes={minutes}\n                seconds={seconds}/>\n            <Button \n                text={isRunning && time !== 0 ? \"Pause\" : \"Start\"}\n                onClick={startStop}/>\n            <Button \n                text=\"Reset\"\n                onClick={reset}/>\n            <Button \n                text=\">>\"\n                onClick={fastForward}/>\n            </Panel>\n        </div>\n    )\n};\n\nexport default XY;\n","import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport Selector from \"../generic/Selector/Selector\";\n\nconst Tabata = () => {\n    // Store the time and button\n    const [isRunning, setIsRunning] = useState(null);\n    const [time, setTime] = useState(0);\n    const [workCount, setWorkCount] = useState(0);\n    const [restCount, setRestCount] = useState(0);\n    const [rounds, setRounds] = useState(0);\n    const [roundsCount, setRoundsCount] = useState(0)\n    const [workStatus, setWorkStatus] = useState(null)\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning && time !==0 && rounds > 0) {\n            // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n            intervalId = setInterval(() => setTime(time - 1), 10);\n            }\n        if (isRunning && workStatus && time === 0 && rounds > 0) {\n            setTime(restCount+99)\n            setWorkStatus(null)\n            intervalId = setInterval(() => setTime(time - 1), 10);\n        }\n        else if (isRunning && workStatus === null && time === 0 && rounds > 0) {\n            setTime(workCount+99 )\n            setWorkStatus(true)\n            setRounds(rounds-1) \n            intervalId = setInterval(() => setTime(time - 1), 10);\n        }\n\n        return () => clearInterval(intervalId);\n\n      }, [isRunning, workStatus, time, rounds, restCount, workCount]);\n \n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    // Start and stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } else {\n            setIsRunning(true)\n        }\n    }\n\n    // Store rounds\n    const handleRounds = e => {\n        setRoundsCount(e.target.value)\n        setRounds(e.target.value)\n    }\n\n    // Reset timer\n    const reset = () => {\n        setIsRunning(null);\n        setTime(workCount)\n        setRounds(roundsCount)\n    }\n\n    // Fast forward (clear) timer\n    const fastForward = () => {\n        setTime(0)\n        setRounds(0)\n    }\n\n    // Show 59 numbers for minutes and seconds\n    const timeNumbersList = [...Array(60).keys()]\n    const timeNumbers = timeNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    // Show max 30 rounds\n    const roundNumbersList = [...Array(31).keys()]\n    const roundNumbers = roundNumbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n\n    return (\n    <div className=\"grid-container\">\n        <Panel background-color=\"blue\">\n        <Selector \n            label=\"sec\"\n            onChange={e => setWorkCount(e.target.value*100)}\n            numbers={timeNumbers}/>\n        <Selector \n            label=\"sec\"\n            onChange={e => setRestCount(e.target.value*100)}\n            numbers={timeNumbers}/>\n        <Selector \n            label=\"rounds\"\n            onChange={handleRounds}\n            numbers={roundNumbers}/>\n        <DisplayTime\n            minutes=\"0\"\n            seconds={seconds}/>\n        <Button \n            text={isRunning && time !== 0 ? \"Pause\" : \"Start\"}\n            onClick={startStop}/>\n        <Button \n            text=\"Reset\"\n            onClick={reset}/>\n        <Button \n            text=\">>\"\n            onClick={fastForward}/>\n            </Panel>\n        </div>\n    )\n};\n\nexport default Tabata;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  padding: 20px;\n  margin: 10px;\n  font-size: 1.5rem;\n`;\n\nconst TimerTitle = styled.div``;\n\nconst TimersView = () => {\n  const timers = [\n    { title: \"Stopwatch\", C: <Stopwatch /> },\n    { title: \"Countdown\", C: <Countdown /> },\n    { title: \"XY\", C: <XY /> },\n    { title: \"Tabata\", C: <Tabata /> }\n  ];\n\n  return (\n    <Timers>\n      {timers.map((timer) => (\n        <Timer key={`timer-${timer.title}`}>\n          <TimerTitle>{timer.title}</TimerTitle>\n          {timer.C}\n        </Timer>\n      ))}\n    </Timers>\n  );\n};\n\nexport default TimersView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Timers</Link>\n        </li>\n        <li>\n          <Link to=\"/docs\">Documentation</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nconst App = () => {\n  return (\n    <Container>\n      <Router>\n        <Nav />\n        <Routes>\n          <Route path=\"/docs\" element={<DocumentationView />} />\n          <Route path=\"/\" element={<TimersView />} />\n        </Routes>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}